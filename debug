==25815== Memcheck, a memory error detector
==25815== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==25815== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==25815== Command: ./a.out
==25815== 
==25815== Use of uninitialised value of size 8
==25815==    at 0x400F03: _printf (_printf.c:56)
==25815==    by 0x400741: main (test.c:38)
==25815== 
==25815== Invalid read of size 1
==25815==    at 0x400F03: _printf (_printf.c:56)
==25815==    by 0x400741: main (test.c:38)
==25815==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==25815== 
==25815== 
==25815== Process terminating with default action of signal 11 (SIGSEGV)
==25815==  Access not within mapped region at address 0x0
==25815==    at 0x400F03: _printf (_printf.c:56)
==25815==    by 0x400741: main (test.c:38)
==25815==  If you believe this happened as a result of a stack
==25815==  overflow in your program's main thread (unlikely but
==25815==  possible), you can try to increase the size of the
==25815==  main thread stack using the --main-stacksize= flag.
==25815==  The main thread stack size used in this run was 8388608.
==25815== 
==25815== HEAP SUMMARY:
==25815==     in use at exit: 109 bytes in 7 blocks
==25815==   total heap usage: 7 allocs, 0 frees, 109 bytes allocated
==25815== 
==25815== LEAK SUMMARY:
==25815==    definitely lost: 51 bytes in 2 blocks
==25815==    indirectly lost: 7 bytes in 2 blocks
==25815==      possibly lost: 0 bytes in 0 blocks
==25815==    still reachable: 51 bytes in 3 blocks
==25815==         suppressed: 0 bytes in 0 blocks
==25815== Rerun with --leak-check=full to see details of leaked memory
==25815== 
==25815== For counts of detected and suppressed errors, rerun with: -v
==25815== Use --track-origins=yes to see where uninitialised values come from
==25815== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
